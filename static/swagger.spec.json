{
  "info": {
    "title": "demo-ecommerce-backend",
    "version": "0.1.0",
    "description": "Demo eCommerce BackEnd - API supplier and Swagger Docs"
  },
  "host": "localhost:8000",
  "schemes": [
    "http",
    "https"
  ],
  "basePath": "/",
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "securityDefinitions": {
    "bearerAuth": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header",
      "description": "Standard Authorization header using the Bearer scheme. Example: \"Bearer {token}\""
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "swagger": "2.0",
  "paths": {
    "/api/v1/products": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Find and count all products",
        "description": "Returns a list of `ProductModel` items that matched the `select` criteria.\n",
        "operationId": "findAndCountAllProducts",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "select",
            "in": "query",
            "type": "object",
            "description": "Select",
            "default": {
              "name": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "`count` and `rows` response of `UserModel` items that matched the request parameters.\n",
            "schema": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "number",
                  "format": "integer",
                  "description": "Total number of records that match the `select` criteria.\n",
                  "example": 12
                },
                "rows": {
                  "description": "An array of `ProductModel` items that matched the request parameters.\n",
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ProductModel"
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/responses/AppNotFound"
          }
        }
      }
    },
    "/api/v1/status/ping": {
      "get": {
        "tags": [
          "Status"
        ],
        "summary": "Checks latency between the client and API server",
        "description": "Common ping test to check if `BackEnd Accounts` is still alive.\n",
        "operationId": "getServiceStatus",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "General info about the Server.",
            "properties": {
              "name": {
                "type": "string",
                "example": "BackEnd Accounts",
                "description": "A distinctive name of the current server."
              },
              "serverTime": {
                "type": "string",
                "example": "2019-09-24T17:43:21.142Z",
                "description": "Server ISO time."
              }
            }
          },
          "500": {
            "$ref": "#/responses/AppNotFound"
          }
        }
      }
    },
    "/api/v1/users": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Find and count all Users",
        "description": "Returns a list of `UserModel` items that matched the `select` criteria.\n",
        "operationId": "findAndCountAllUsers",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "select",
            "in": "query",
            "type": "object",
            "description": "The `select` query object is used to point what data the API need to return.\nAdding a property to the `select` object will return the corresponding data.\n\nFor example, if you'd like to get a list of all `Users` with their full name, you can submit this `select`:\n```\n{\n  \"full_name\": \"\"\n}\n```\n<br />\n\nWhenever you fee like you want only a slice of the response you can apply pagination via the `$offset` and `$limit` props.\nFor example, if you'd like to get page **3** of all `Users` with a maximum of **5** rows per page, you can submit this `select`:\n```\n{\n  \"full_name\": \"\",\n  \"$offset\": 10,\n  \"$limit\": 5\n}\n```\n<br />\n\nFiltration is also supported with the special key of `\"$where\":{}`. The `$where` object supports all comparison operators\nfrom Sequelize ORM https://sequelize.org/master/manual/model-querying-basics.html#operators. Please note that operations are prefixed, e.g. instead of `Op.eq` => `$eq`.\n\nFor example, if you'd like to get a list of all `Users` within the continent of `Africa`, you can submit this `select`:\n```\n{\n  \"full_name\": \"\",\n  \"country\": {\n    \"name\": \"\",\n    \"continent_name\": \"\",\n    \"$where\": {\n      \"continent_name\": {\n        \"$eq\": \"Africa\"\n      }\n    }\n  }\n}\n```\n<br />\n\nSimilarly, you can use the `\"$order\":[]` object to set a specific order of your results. The `$order` object is an array of rules that will be applied starting from the first rule in the array down to the last one.\n\nFor example, if you'd like to get a list of `Users` which ordered the most products by country, you can submit this `select`:\n```\n{\n  \"full_name\": \"\",\n  \"country\": {\n    \"name\": \"\"\n  },\n  \"orders\": {\n    \"id\": \"\",\n    \"order_items\": {\n      \"quantity\": \"\"\n    }\n  },\n  \"$order\": [\n    [\"orders.order_items.quantity\", \"desc\"],\n    [\"country.name\", \"asc\"]\n  ]\n}\n```\n<br />\n",
            "default": {
              "full_name": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "`count` and `rows` response of `UserModel` items that matched the request parameters.\n",
            "schema": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "number",
                  "format": "integer",
                  "description": "Total number of records that match the `select` criteria.\n",
                  "example": 12
                },
                "rows": {
                  "description": "An array of `UserModel` items that matched the request parameters.\n",
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/UserModel"
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/responses/AppNotFound"
          }
        }
      }
    },
    "/api/v1/users/{id}": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Find one User",
        "description": "This API returns a single one `User` based on common `select` request\nand the `id` URL param\n",
        "operationId": "findOneUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/PathUniqueIdentifierV4"
          },
          {
            "name": "select",
            "in": "query",
            "type": "object",
            "description": "The `select` query object is used to point what data the API need to return.\nAdding a property to the `select` object will return the corresponding data.\n\nFor example, if you'd like to get the `User` full name, you can submit this `select`:\n```\n{\n  \"full_name\": \"\"\n}\n```\n\nFiltration is also supported with the special key of `\"$where\":{}`. The `$where` object supports all comparison operators\nfrom Sequelize ORM https://sequelize.org/master/manual/model-querying-basics.html#operators. Please note that operations are prefixed, e.g. instead of `Op.eq` => `$eq`.\n\nFor example, if you'd like to get a list of all `Products` a specific `User` bought around Christmas, you can submit this `select`:\n```\n{\n  \"full_name\": \"\",\n  \"orders\": {\n    \"created_at\": \"\",\n    \"$where\": {\n      \"created_at\": {\n        \"$and\": [\n          {\"$gt\": \"2019-12-10T00:00:00.000Z\"},\n          {\"$lt\": \"2019-12-27T00:00:00.000Z\"}\n        ]\n      }\n    },\n    \"order_items\": {\n      \"quantity\": \"\",\n      \"product\": {\n        \"name\": \"\"\n      }\n    }\n  }\n}\n```\n\nSimilarly, you can use the `\"$order\":[]` object to set a specific order of your results. The `$order` object is an array of rules that will be applied starting from the first rule in the array down to the last one.\n\nFor example, if you'd like to get what was the most expensive `Order` a specific `User` paid for, you can submit this `select`:\n```\n{\n  \"full_name\": \"\",\n  \"orders\": {\n    \"id\": \"\",\n    \"order_items\": {\n      \"quantity\": \"\",\n      \"product\": {\n        \"name\": \"\",\n        \"price\": \"\"\n      }\n    }\n  },\n  \"$order\": [\n    [\"orders.order_items.quantity\", \"desc\"],\n    [\"orders.order_items.product.price\", \"desc\"]\n  ]\n}\n```\n",
            "default": {
              "full_name": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Single one `Users` that matched the request parameters.\n",
            "schema": {
              "$ref": "#/definitions/DatabaseUser"
            }
          },
          "404": {
            "description": "Unable to find User with the requested params.",
            "schema": {
              "$ref": "#/definitions/ResponseError"
            },
            "examples": {
              "application/json": {
                "errorId": "a34f4558-1b88-47cd-8d63-ae4eaf038bd7",
                "errorCode": "USER_NOT_FOUND",
                "errorMessage": "Unable to find user"
              }
            }
          },
          "500": {
            "$ref": "#/responses/AppNotFound"
          }
        }
      }
    }
  },
  "definitions": {
    "ResponseError": {
      "type": "object",
      "description": "Schema for `4XX` server error response body.\nResponse includes a UUIDv4, error code and message body.\n",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "example": "a34f4558-1b88-47cd-8d63-ae4eaf038bd7"
        },
        "code": {
          "type": "string",
          "example": "GENERIC_SERVER_ERROR"
        },
        "message": {
          "type": "string",
          "example": "Generic server error"
        }
      },
      "required": [
        "id",
        "code",
        "message"
      ]
    },
    "AddressModel": {
      "description": "`AddressModel` is a general location description that can be related to a product, order, or other object.\n",
      "allOf": [
        {
          "type": "object",
          "required": [
            "id",
            "addressLine1",
            "addressLine2",
            "city",
            "state",
            "country",
            "postalCode",
            "createdAt",
            "deletedAt"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Unique address ID",
              "example": "d628c599-6282-4e35-b05b-4a6990e678fa"
            },
            "addressLine1": {
              "type": "string",
              "description": "General street identification",
              "example": "9th ave"
            },
            "addressLine2": {
              "type": "string",
              "description": "Specific street identification, like street number",
              "example": "10a"
            },
            "city": {
              "type": "string",
              "description": "City name",
              "example": "New York"
            },
            "state": {
              "type": "string",
              "description": "State or province name",
              "example": "New York"
            },
            "country": {
              "type": "string",
              "description": "Country name",
              "example": "USA"
            },
            "postalCode": {
              "type": "string",
              "description": "Postal or ZIP code",
              "example": 12000
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "readOnly": true,
              "description": "DateTime indicating when that address was created",
              "example": "2020-04-30T00:00:00.000Z"
            },
            "deletedAt": {
              "type": "string",
              "format": "date-time",
              "readOnly": true,
              "description": "DateTime indicating when that address was marked as deleted",
              "example": "2021-04-30T00:00:00.000Z"
            }
          }
        }
      ]
    },
    "CategoryModel": {
      "description": "`CategoryModel` is a list of descriptive tags that can be assigned to a product.\n",
      "allOf": [
        {
          "type": "object",
          "required": [
            "id",
            "name",
            "description"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Unique category ID",
              "example": "d628c599-6282-4e35-b05b-4a6990e678fa"
            },
            "name": {
              "type": "string",
              "description": "Short UI description of the category",
              "example": "Phones"
            },
            "description": {
              "type": "string",
              "description": "Long UI description of the category",
              "example": "Category related to phones"
            }
          }
        }
      ]
    },
    "CategoryToProductModel": {
      "description": "Relation model that makes the many-to-many mapping between `CategoryModel` and `ProductModel`.\nThis models shows which product is tagged with which category.\n",
      "allOf": [
        {
          "type": "object",
          "required": [
            "categoryId",
            "productId"
          ],
          "properties": {
            "categoryId": {
              "type": "string",
              "format": "uuid",
              "description": "Category ID",
              "example": "d628c599-6282-4e35-b05b-4a6990e678fa"
            },
            "productId": {
              "type": "string",
              "format": "uuid",
              "description": "Product ID",
              "example": "d628c599-6282-4e35-b05b-4a6990e678fa"
            }
          }
        }
      ]
    },
    "OrderModel": {
      "description": "OrderModel is the base of all that a seller can sell.\nIt has a general name, price, and props a buyer can view.\n",
      "allOf": [
        {
          "type": "object",
          "required": [
            "id",
            "shippingAddressId",
            "customerName",
            "customerEmail",
            "customerPhone",
            "price",
            "status",
            "createdAt",
            "deletedAt"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Unique product ID",
              "example": "d628c599-6282-4e35-b05b-4a6990e678fa"
            },
            "shippingAddressId": {
              "type": "string",
              "format": "uuid",
              "description": "Reference to the `AddressModel`",
              "example": "d628c599-6282-4e35-b05b-4a6990e678fa"
            },
            "customerName": {
              "type": "string",
              "description": "Name of the Customer",
              "example": "John Smith"
            },
            "customerEmail": {
              "type": "string",
              "description": "Email of the Customer",
              "example": "john@smith.com"
            },
            "customerPhone": {
              "type": "string",
              "description": "Phone number of the Customer",
              "example": "555-1234567"
            },
            "status": {
              "type": "string",
              "description": "Where this orders stands in term of progress toward our customer",
              "example": "draft"
            },
            "price": {
              "type": "number",
              "description": "How much the total order cost the Customer, including coupons or additional shipping expenses",
              "example": 199
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "readOnly": true,
              "description": "DateTime indicating when that order was created",
              "example": "2020-04-30T00:00:00.000Z"
            },
            "deletedAt": {
              "type": "string",
              "format": "date-time",
              "readOnly": true,
              "description": "DateTime indicating when that order was marked as deleted",
              "example": "2021-04-30T00:00:00.000Z"
            }
          }
        }
      ]
    },
    "OrderItemModel": {
      "description": "OrderItemModel represents one thing that the Customer wants to buy.\nAll order items are grouped within the `OrderModel` so we can give all items\nthe same shipping details or group/coupon discount.\n",
      "allOf": [
        {
          "type": "object",
          "required": [
            "id",
            "orderId",
            "productId",
            "props",
            "quantity",
            "price",
            "createdAt",
            "deletedAt"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Unique product ID",
              "example": "d628c599-6282-4e35-b05b-4a6990e678fa"
            },
            "orderId": {
              "type": "string",
              "format": "uuid",
              "description": "Reference to the `OrderModel`",
              "example": "d628c599-6282-4e35-b05b-4a6990e678fa"
            },
            "productId": {
              "type": "string",
              "format": "uuid",
              "description": "Reference to the `ProductModel`",
              "example": "d628c599-6282-4e35-b05b-4a6990e678fa"
            },
            "props": {
              "type": "object",
              "description": "JSON list of selected product specific props, such as color, size, volume, km/h, etc.",
              "example": {
                "color": "Red"
              }
            },
            "quantity": {
              "type": "number",
              "description": "How many of the selected product a buyer wants to buy",
              "example": 7
            },
            "price": {
              "type": "number",
              "description": "The price Buyer pays when buys the product",
              "example": 199
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "readOnly": true,
              "description": "DateTime indicating when that order item was created",
              "example": "2020-04-30T00:00:00.000Z"
            },
            "deletedAt": {
              "type": "string",
              "format": "date-time",
              "readOnly": true,
              "description": "DateTime indicating when that order item was marked as deleted",
              "example": "2021-04-30T00:00:00.000Z"
            }
          }
        }
      ]
    },
    "ProductModel": {
      "description": "ProductModel is the base of all that a seller can sell.\nIt has a general name, price, and props a buyer can view.\n",
      "allOf": [
        {
          "type": "object",
          "required": [
            "id",
            "name",
            "description",
            "imageUrl",
            "price",
            "basePrice",
            "props",
            "totalInStock",
            "originAddressId",
            "vendorId",
            "createdAt",
            "deletedAt"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Unique product ID",
              "example": "d628c599-6282-4e35-b05b-4a6990e678fa"
            },
            "name": {
              "type": "string",
              "description": "Short UI description of the product",
              "example": "NOMAD 26"
            },
            "description": {
              "type": "string",
              "description": "Long UI description of the product",
              "example": "Outdoor activities were never so close"
            },
            "imageUrl": {
              "type": "string",
              "description": "URL of the product image",
              "example": "https://www.dimibike.com/images/products/large/cross-nomad-26-inch.jpg"
            },
            "price": {
              "type": "number",
              "description": "The price Buyer pays when buys the product",
              "example": 199
            },
            "basePrice": {
              "type": "number",
              "description": "The price Seller pays to produce the product",
              "example": 75
            },
            "props": {
              "type": "object",
              "description": "JSON list of product specific props, such as color, size, volume, km/h, etc.",
              "example": {
                "color": "Red"
              }
            },
            "totalInStock": {
              "type": "number",
              "description": "How many of these products we have in the store",
              "example": 11
            },
            "originAddressId": {
              "type": "string",
              "format": "uuid",
              "description": "Reference to the `AddressModel`",
              "example": "d628c599-6282-4e35-b05b-4a6990e678fa"
            },
            "vendorId": {
              "type": "string",
              "format": "uuid",
              "description": "Reference to the `VendorModel`",
              "example": "d628c599-6282-4e35-b05b-4a6990e678fa"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "readOnly": true,
              "description": "DateTime indicating when that product was created",
              "example": "2020-04-30T00:00:00.000Z"
            },
            "deletedAt": {
              "type": "string",
              "format": "date-time",
              "readOnly": true,
              "description": "DateTime indicating when that product was marked as deleted",
              "example": "2021-04-30T00:00:00.000Z"
            }
          }
        }
      ]
    },
    "RoleModel": {
      "description": "`RoleModel` is a list of all available User roles, such as \"admin\" and \"seller\".\nSpecific \"store\" roles (such as \"owner\", \"manager\") are arranged in `StoreRoleModel`.\n",
      "allOf": [
        {
          "type": "object",
          "required": [
            "id",
            "name",
            "code",
            "description"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Unique role ID",
              "example": "d628c599-6282-4e35-b05b-4a6990e678fa"
            },
            "name": {
              "type": "string",
              "description": "Short UI description of the role",
              "example": "Admin"
            },
            "code": {
              "type": "string",
              "description": "Unique enumeration of the role used in the programming code",
              "example": "admin"
            },
            "description": {
              "type": "string",
              "description": "Long UI description of the role",
              "example": "User that maintains all stores in the system"
            }
          }
        }
      ]
    },
    "StoreModel": {
      "description": "StoreModel serves as presentational for all Seller products.\n",
      "allOf": [
        {
          "type": "object",
          "required": [
            "id",
            "name",
            "description",
            "createdAt"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Unique store ID",
              "example": "d628c599-6282-4e35-b05b-4a6990e678fa"
            },
            "name": {
              "type": "string",
              "description": "Short UI description of the store",
              "example": "Alo-Alo"
            },
            "description": {
              "type": "string",
              "description": "Long UI description of the store",
              "example": "Store dedicated on selling only phones"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "readOnly": true,
              "description": "DateTime indicating when that store was created",
              "example": "2020-04-30T00:00:00.000Z"
            },
            "deletedAt": {
              "type": "string",
              "format": "date-time",
              "readOnly": true,
              "description": "DateTime indicating when that store was marked as deleted",
              "example": "2021-04-30T00:00:00.000Z"
            }
          }
        }
      ]
    },
    "StoreRoleModel": {
      "description": "`StoreRoleModel` which Seller user is related to which Store and as what role.\nPossible Sore roles can be \"owner\", \"manager\", etc.\nGeneral User roles (such as \"admin\" and \"seller\") are arranged in `RoleModel`.\n",
      "allOf": [
        {
          "type": "object",
          "required": [
            "id",
            "name",
            "code",
            "description"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Unique Store role ID",
              "example": "d628c599-6282-4e35-b05b-4a6990e678fa"
            },
            "name": {
              "type": "string",
              "description": "Short UI description of the role",
              "example": "Owner"
            },
            "code": {
              "type": "string",
              "description": "Unique enumeration of the store role used in the programming code",
              "example": "owner"
            },
            "description": {
              "type": "string",
              "description": "Long UI description of the store role",
              "example": "Seller that has full access to all of his stores"
            }
          }
        }
      ]
    },
    "StoreToProductModel": {
      "description": "Relation model that makes the many-to-many mapping between `StoreModel` and `ProductModel`.\nThis models shows which product belongs to which store.\n",
      "allOf": [
        {
          "type": "object",
          "required": [
            "storeId",
            "productId"
          ],
          "properties": {
            "storeId": {
              "type": "string",
              "format": "uuid",
              "description": "Store ID",
              "example": "d628c599-6282-4e35-b05b-4a6990e678fa"
            },
            "productId": {
              "type": "string",
              "format": "uuid",
              "description": "Product ID",
              "example": "d628c599-6282-4e35-b05b-4a6990e678fa"
            }
          }
        }
      ]
    },
    "UserModel": {
      "description": "User can be the administrator that oversee trade.\nUser can also manage stores.\n",
      "allOf": [
        {
          "type": "object",
          "required": [
            "id",
            "name",
            "email",
            "hashedPassword",
            "status",
            "createdAt",
            "deletedAt"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Unique user ID",
              "example": "d628c599-6282-4e35-b05b-4a6990e678fa"
            },
            "name": {
              "type": "string",
              "description": "User name",
              "example": "John Smith"
            },
            "email": {
              "type": "string",
              "description": "User email",
              "example": "john@smith.com"
            },
            "hashedPassword": {
              "type": "string",
              "description": "User password after hashing",
              "example": "$argon2i$v=19$m=4096,t=3,p=1$e11PTDcTo+38dPL5QkNDYw$uVU+YbfAsp6PWQWAEKuDkj/u5PtULEEQAWFvreJwkDg"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "readOnly": true,
              "description": "DateTime indicating when that user was created",
              "example": "2020-04-30T00:00:00.000Z"
            },
            "deletedAt": {
              "type": "string",
              "format": "date-time",
              "readOnly": true,
              "description": "DateTime indicating when that user was marked as deleted",
              "example": "2021-04-30T00:00:00.000Z"
            }
          }
        }
      ]
    },
    "UserStoreRoleModel": {
      "description": "`UserStoreRoleModel` makes the many-to-many mapping between `UserModel`, `StoreModel`, and `StoreRoleModel`.\nThis triangulation of shows how a user is related to a store. A seller user might be store \"owner\", \"manager\", etc.\nList of all available store roles can be found in the `StoreRoleModel`.\nIf a user is \"admin\" or \"seller\" is determined in the `UserToRoleModel`.\n",
      "allOf": [
        {
          "type": "object",
          "required": [
            "userId",
            "storeRoleId",
            "storeId",
            "storeRoleCode"
          ],
          "properties": {
            "userId": {
              "type": "string",
              "format": "uuid",
              "description": "User ID",
              "example": "d628c599-6282-4e35-b05b-4a6990e678fa"
            },
            "storeRoleId": {
              "type": "string",
              "format": "uuid",
              "description": "StoreRole ID, relation to \"owner\", \"manager\"",
              "example": "d628c599-6282-4e35-b05b-4a6990e678fa"
            },
            "storeId": {
              "type": "string",
              "format": "uuid",
              "description": "Store ID",
              "example": "d628c599-6282-4e35-b05b-4a6990e678fa"
            },
            "storeRoleCode": {
              "type": "string",
              "description": "StoreRole code prop used for quicker query check",
              "example": "sellerOwner"
            }
          }
        }
      ]
    },
    "UserToRoleModel": {
      "description": "Relation model that makes the many-to-many mapping between `UserModel` and `RoleModel`.\nA user can have a role of \"admin\", \"seller\" or both.\nIf you're interested to check \"What kind of seller a user is ?\" (e.g. \"owner\", \"manager\")\nthen check the relations in `UserStoreRoleModel`.\n",
      "allOf": [
        {
          "type": "object",
          "required": [
            "userId",
            "roleId"
          ],
          "properties": {
            "userId": {
              "type": "string",
              "format": "uuid",
              "description": "User ID",
              "example": "d628c599-6282-4e35-b05b-4a6990e678fa"
            },
            "roleId": {
              "type": "string",
              "format": "uuid",
              "description": "Role ID",
              "example": "d628c599-6282-4e35-b05b-4a6990e678fa"
            }
          }
        }
      ]
    },
    "VendorModel": {
      "description": "`VendorModel` is a list of all product producers.\n",
      "allOf": [
        {
          "type": "object",
          "required": [
            "id",
            "name",
            "description"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Unique vendor ID",
              "example": "d628c599-6282-4e35-b05b-4a6990e678fa"
            },
            "name": {
              "type": "string",
              "description": "Short UI description of the vendor",
              "example": "Cross"
            },
            "description": {
              "type": "string",
              "description": "Long UI description of the vendor",
              "example": "Cross LTD is a Bulgarian Company established in 1995 specialized in bicycle manufacturing."
            }
          }
        }
      ]
    }
  },
  "responses": {
    "InvalidRequest": {
      "description": "Invalid parameters sent to the server.\n",
      "schema": {
        "$ref": "#/definitions/ResponseError"
      },
      "examples": {
        "application/json": {
          "id": "a34f4558-1b88-47cd-8d63-ae4eaf038bd7",
          "code": "REQUEST_VALIDATION_ERROR",
          "message": "Missing request \"${type}\""
        }
      }
    },
    "AppNotFound": {
      "description": "Some unexpected issue occurred and crashed the app.\n",
      "schema": {
        "$ref": "#/definitions/ResponseError"
      },
      "examples": {
        "application/json": {
          "id": "a34f4558-1b88-47cd-8d63-ae4eaf038bd7",
          "code": "INTERNAL_SERVER_ERROR",
          "message": "Internal server error"
        }
      }
    }
  },
  "parameters": {
    "IdInPath": {
      "in": "path",
      "name": "id",
      "type": "number",
      "format": "integer",
      "required": true,
      "description": "The `id` property of the entity we want to retrieve.\n"
    },
    "IdInQuery": {
      "in": "query",
      "name": "id",
      "type": "string",
      "format": "uuid",
      "required": true,
      "description": "The `id` property of the entity we want to retrieve.\n"
    }
  },
  "tags": []
}